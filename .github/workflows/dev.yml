name: CI/CD Pipeline with EC2 Deployment

env:
  DATABASE_TYPE: postgres
  DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
  DATABASE_PORT: 5432
  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
  DATABASE_NAME: sparrow_v1
  DATABASE_SYNCHRONIZE: false
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EC2_INSTANCE_TYPE: t3.micro
  EC2_AMI_ID: ami-0880b5f3e22dd20a6
  EC2_KEY_NAME: ${{ secrets.EC2_KEY_NAME }}
  EC2_SECURITY_GROUP: ${{ secrets.EC2_SECURITY_GROUP }}
  PM2_APP_NAME: gradu8-app

on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PEM }}" > ~/.ssh/ec2_key.pem
          chmod 600 ~/.ssh/ec2_key.pem
          # Verify key format
          ssh-keygen -lf ~/.ssh/ec2_key.pem

      - name: Check Connection
        run: |
          echo "Trying SSH connection..."
          ssh -vvv -i ~/.ssh/ec2_key.pem \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              ec2-user@ec2-65-0-30-99.ap-south-1.compute.amazonaws.com \
              "echo 'SSH connection successful!'"

      - name: Deploy Application
        run: |
          ssh -i ~/.ssh/ec2_key.pem \
              -o StrictHostKeyChecking=no \
              ec2-user@ec2-65-0-30-99.ap-south-1.compute.amazonaws.com << 'EOF'
            # Navigate to project directory
            cd gcgms
            
            # Pull latest changes
            git pull https://${{ secrets.TOKEN }}@github.com/PN-MINDEF/MINDEF-GC-API.git  master

            # Install dependencies and build
            npm install --force
            npm run build
            
            # Restart application
            pm2 restart ${{ env.PM2_APP_NAME }} || pm2 start npm --name "${{ env.PM2_APP_NAME }}" -- start
            
            # Verify deployment
            echo 'Deployment complete!'
            pm2 list
          EOF
